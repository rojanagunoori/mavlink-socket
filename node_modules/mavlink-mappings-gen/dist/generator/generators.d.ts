import { Pipeable } from './pipeable';
/**
 * Simple interface to define objects that allow for writing lines
 */
export interface Writer {
    /**
     * Write a single line
     *
     * @param line line to write (handle missing values!)
     */
    write(line?: string): void;
}
export declare function generateEnums(output: Writer, enums: {
    name: string;
    description: string[];
    values: {
        name: string;
        value: string;
        description: string[];
        hasLocation: boolean;
        isDestination: boolean;
        params: {
            name: string;
            label: string;
            description: string;
            index: string;
            units: string;
            minValue: string;
            maxValue: string;
            increment: string;
        }[];
    }[];
    source: {
        name: string;
    };
}[]): void;
export declare function generateEnum(output: Writer, maxEnumValueNameLength: number, entry: {
    name: string;
    description: string[];
    source: {
        name: string;
    };
    values: {
        name: string;
        value: string;
        hasLocation: boolean;
        isDestination: boolean;
        description: string[];
        params: {
            name: string;
            label: string;
            description: string;
            index: string;
            units: string;
            minValue: string;
            maxValue: string;
            increment: string;
        }[];
    }[];
}): void;
export declare function generateEnumValues(output: Writer, maxEnumValueNameLength: number, values: {
    name: string;
    value: string;
    hasLocation: boolean;
    isDestination: boolean;
    description: string[];
    params: {
        name: string;
        label: string;
        description: string;
        index: string;
        units: string;
        minValue: string;
        maxValue: string;
        increment: string;
    }[];
}[]): void;
export declare function generateEnumValue(output: Writer, maxEnumValueNameLength: number, index: number, value: {
    name: string;
    value: string;
    hasLocation: boolean;
    isDestination: boolean;
    description: string[];
    params: {
        label: string;
        description: string;
        index: string;
        units: string;
        minValue: string;
        maxValue: string;
        increment: string;
    }[];
}): void;
export declare function generateEnumValueParams(output: Writer, hasProps: boolean, value: {
    description: string[];
    params: {
        label: string;
        description: string;
        index: string;
        units: string;
        minValue: string;
        maxValue: string;
        increment: string;
    }[];
}): void;
export declare function generateMessageDoc(output: Writer, message: {
    description: string[];
    deprecated?: {
        description: string;
        since: string;
        replacedBy: string;
    };
    source: {
        name: string;
    };
}): void;
export declare function generateMessageClassHeader(output: Writer, message: {
    name: string;
}): void;
export declare function generateMessageStaticDeclarations(output: Writer, message: {
    id: string;
    source: {
        name: string;
    };
    magic?: number;
    payloadLength?: number;
}): void;
export declare function generateMessageDefinitionFields(output: Writer, fields: {
    name: string;
    description: string[];
    fieldSize: number;
    extension: boolean;
    arrayLength: number;
    fieldType: string;
    size: number;
    units: string;
    type: string;
    source: {
        name: string;
    };
}[]): void;
export declare function generateMessageConstructor(output: Writer, fields: {
    name: string;
    description: string[];
    fieldSize: number;
    extension: boolean;
    arrayLength: number;
    fieldType: string;
    size: number;
    units: string;
    type: string;
    source: {
        name: string;
        enum?: string;
    };
}[]): void;
export declare function generateMessageFields(output: Writer, fields: {
    name: string;
    type: string;
    description: string[];
    units: string;
}[]): void;
export declare function generateMessageClass(output: Writer, message: {
    id: string;
    name: string;
    source: {
        name: string;
    };
    magic?: number;
    payloadLength?: number;
    fields: {
        name: string;
        description: string[];
        fieldSize: number;
        extension: boolean;
        arrayLength: number;
        fieldType: string;
        size: number;
        units: string;
        type: string;
        source: {
            name: string;
        };
    }[];
}): void;
export declare function generateMessage(output: Writer, message: {
    id: string;
    name: string;
    description: string[];
    magic?: number;
    payloadLength?: number;
    source: {
        name: string;
    };
    deprecated?: {
        description: string;
        since: string;
        replacedBy: string;
    };
    fields: {
        name: string;
        description: string[];
        fieldSize: number;
        extension: boolean;
        arrayLength: number;
        fieldType: string;
        size: number;
        units: string;
        type: string;
        source: {
            name: string;
        };
    }[];
}): void;
export declare function generateMessages(output: Writer, messages: {
    source: {
        name: string;
    };
    id: string;
    name: string;
    description: string[];
    magic?: number;
    payloadLength?: number;
    deprecated?: {
        description: string;
        since: string;
        replacedBy: string;
    };
    fields: {
        name: string;
        description: string[];
        fieldSize: number;
        extension: boolean;
        arrayLength: number;
        fieldType: string;
        size: number;
        units: string;
        type: string;
        source: {
            name: string;
        };
    }[];
}[]): void;
export declare function generateMessageRegistry(output: Writer, messages: {
    id: string;
    name: string;
}[]): void;
export declare function generateCommandDoc(output: Writer, command: {
    description: string[];
    hasLocation: boolean;
    isDestination: boolean;
}): void;
export declare function generateCommandConstructor(output: Writer, command: {
    name: string;
}): void;
export declare function generateCommandParams(output: Writer, params: {
    name: string;
    index: string;
    description: string[];
    label: string;
    units: string;
    minValue: string;
    maxValue: string;
    increment: string;
}[]): void;
export declare function generateCommandClass(output: Writer, command: {
    description: string[];
    hasLocation: boolean;
    isDestination: boolean;
    field: string;
    name: string;
    source: {
        commonPrefix?: string;
    };
    params: {
        name: string;
        index: string;
        description: string[];
        label: string;
        units: string;
        minValue: string;
        maxValue: string;
        increment: string;
    }[];
}): void;
export declare function generateCommandParamDoc(output: Writer, param: {
    description: string[];
    index: string;
    label: string;
    units: string;
    minValue: string;
    maxValue: string;
    increment: string;
}): void;
export declare function generateCommandParamGetterAndSetter(output: Writer, param: {
    name: string;
    index: string;
}): void;
export declare function generateCommand(output: Writer, command: {
    description: string[];
    hasLocation: boolean;
    isDestination: boolean;
    field: string;
    name: string;
    params: {
        name: string;
        index: string;
        description: string[];
        label: string;
        units: string;
        minValue: string;
        maxValue: string;
        increment: string;
    }[];
    source: {
        commonPrefix?: string;
    };
}): void;
export declare function generateCommands(output: Writer, moduleName: string, commands: {
    name: string;
    description: string[];
    hasLocation: boolean;
    isDestination: boolean;
    params: {
        name: string;
        index: string;
        description: string[];
        label: string;
        units: string;
        minValue: string;
        maxValue: string;
        increment: string;
    }[];
    field: string;
    source: {
        commonPrefix?: string;
    };
}[]): void;
export declare function generateCommandRegistry(output: Writer, commands: {
    name: string;
    field: string;
}[]): void;
export declare function generateMagicNumbers(magicNumbers: Record<string, number>): string;
export declare function processRegistries(output: Writer, messages: {
    id: string;
    name: string;
}[], commands: {
    name: string;
    field: string;
}[]): void;
export declare function generateAll(input: string, output: Writer, moduleName?: string): Promise<{
    enums: {
        description: string[];
        values: {
            description: string[];
            source: {
                name: string;
                value: string;
                commonPrefix: string;
            };
            name: string;
            value: string;
            params: import("./datasource").EnumParamValueDef[];
            hasLocation: boolean;
            isDestination: boolean;
            workInProgress: boolean;
        }[];
        name: string;
        source: {
            name: string;
            commonPrefix: string;
        };
    }[] & Pipeable<{
        description: string[];
        values: {
            description: string[];
            source: {
                name: string;
                value: string;
                commonPrefix: string;
            };
            name: string;
            value: string;
            params: import("./datasource").EnumParamValueDef[];
            hasLocation: boolean;
            isDestination: boolean;
            workInProgress: boolean;
        }[];
        name: string;
        source: {
            name: string;
            commonPrefix: string;
        };
    }[]>;
    messages: {
        name: string;
        description: string[];
        fields: {
            description: string[];
            source: {
                name: string;
                type: string;
                enum: string;
            };
            name: string;
            extension: boolean;
            type: string;
            arrayLength: number;
            size: number;
            fieldType: string;
            fieldSize: number;
            itemType: string;
            units: string;
        }[];
        source: {
            xml: any;
            name: string;
        };
        deprecated?: {
            since: string;
            replacedBy: string;
            description: string;
        } | undefined;
        id: string;
        workInProgress: boolean;
        wip: boolean;
        magic?: number | undefined;
        payloadLength?: number | undefined;
    }[] & Pipeable<{
        name: string;
        description: string[];
        fields: {
            description: string[];
            source: {
                name: string;
                type: string;
                enum: string;
            };
            name: string;
            extension: boolean;
            type: string;
            arrayLength: number;
            size: number;
            fieldType: string;
            fieldSize: number;
            itemType: string;
            units: string;
        }[];
        source: {
            xml: any;
            name: string;
        };
        deprecated?: {
            since: string;
            replacedBy: string;
            description: string;
        } | undefined;
        id: string;
        workInProgress: boolean;
        wip: boolean;
        magic?: number | undefined;
        payloadLength?: number | undefined;
    }[]>;
    commands: {
        description: string[];
        params: {
            description: string[];
            name: string;
            label: string;
            index: string;
            units: string;
            minValue: string;
            maxValue: string;
            increment: string;
        }[];
        field: string;
        source: {
            name: string;
            value: string;
            commonPrefix: string;
        };
        name: string;
        value: string;
        hasLocation: boolean;
        isDestination: boolean;
        workInProgress: boolean;
    }[] & Pipeable<{
        description: string[];
        params: {
            description: string[];
            name: string;
            label: string;
            index: string;
            units: string;
            minValue: string;
            maxValue: string;
            increment: string;
        }[];
        field: string;
        source: {
            name: string;
            value: string;
            commonPrefix: string;
        };
        name: string;
        value: string;
        hasLocation: boolean;
        isDestination: boolean;
        workInProgress: boolean;
    }[]>;
}>;
