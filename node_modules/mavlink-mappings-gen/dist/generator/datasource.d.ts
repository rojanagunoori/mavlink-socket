import { Pipeable } from './pipeable';
export interface EnumParamValueDef {
    name: string;
    label: string;
    description: string;
    index: string;
    units: string;
    minValue: string;
    maxValue: string;
    increment: string;
}
export interface EnumValueDef {
    source: {
        name: string;
        value: string;
        commonPrefix: string;
    };
    name: string;
    value: string;
    description: string;
    params: EnumParamValueDef[];
    hasLocation: boolean;
    isDestination: boolean;
    workInProgress: boolean;
}
export interface EnumDef {
    name: string;
    source: {
        name: string;
        commonPrefix: string;
    };
    description: string;
    values: EnumValueDef[];
}
export interface CommandTypeDef extends EnumValueDef {
    field: string;
}
export interface MessageFieldDef {
    source: {
        name: string;
        type: string;
        enum: string;
    };
    name: string;
    extension: boolean;
    description: string;
    type: string;
    arrayLength: number;
    size: number;
    fieldType: string;
    fieldSize: number;
    itemType: string;
    units: string;
}
export interface MessageDef {
    source: {
        xml: any;
        name: string;
    };
    deprecated?: {
        since: string;
        replacedBy: string;
        description: string;
    };
    id: string;
    name: string;
    description: string;
    workInProgress: boolean;
    fields: MessageFieldDef[];
    wip: boolean;
    magic?: number;
    payloadLength?: number;
}
export interface Input {
    readonly enumDefs: EnumDef[] & Pipeable<EnumDef[]>;
    readonly messageDefs: MessageDef[] & Pipeable<MessageDef[]>;
    readonly commandTypeDefs: CommandTypeDef[] & Pipeable<CommandTypeDef[]>;
}
export declare class XmlDataSource {
    parse(xml: string): Promise<Input>;
    read(mavlink: any): Input;
    private readEnumDefs;
    private readEnumValueDefs;
    private readEnumValueParamDefs;
    private readMessageDefs;
    private readMessageFieldDefs;
    private readCommandDefs;
    private updateCommandMessages;
}
