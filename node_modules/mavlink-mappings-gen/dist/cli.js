#!/usr/bin/env -S npx ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const minimist_1 = __importDefault(require("minimist"));
const path_1 = require("path");
const fs_1 = require("fs");
const generator_1 = require("./generator");
const promises_1 = require("fs/promises");
const package_json_1 = __importDefault(require("./package.json"));
const args = (0, minimist_1.default)(process.argv.slice(2), {
    boolean: [
        'help',
        'version',
        'write',
        'magic',
    ],
    alias: {
        'help': 'h',
        'version': 'V',
        'write': 'w',
        'magic': 'm',
    },
    default: {
        help: false,
        version: false,
        write: false,
        magic: false,
    },
    unknown(name) {
        if (name.startsWith('-')) {
            console.error('ERROR: unknown parameter:', name);
            process.exit(2);
        }
        return true;
    }
});
function print(msg) {
    process.stderr.write(msg);
}
function getModuleName(filename) {
    return (0, path_1.parse)(filename).name;
}
function getOutputFileName(filename) {
    return filename.substring(0, filename.length - 3) + 'ts';
}
function getImportsTemplateFileName(filename) {
    return filename.substring(0, filename.length - 3) + 'imports.ts';
}
function getMagicNumbersFileName(filename) {
    return (0, path_1.dirname)(filename) + '/magic-numbers.ts';
}
function generateFile(filename, moduleName) {
    return __awaiter(this, void 0, void 0, function* () {
        print(`Generating ${filename}...`);
        const lines = [];
        const importsFileName = getImportsTemplateFileName(filename);
        const imports = (0, fs_1.existsSync)(importsFileName) ? (0, fs_1.readFileSync)(importsFileName) : Buffer.from('');
        const source = (yield (0, promises_1.readFile)(filename)).toString();
        const output = { write: msg => lines.push(msg !== null && msg !== void 0 ? msg : '') };
        if (imports.length > 0)
            output.write(imports.toString());
        const { enums, commands, messages } = yield (0, generator_1.generateAll)(source, output, moduleName);
        print('done\n');
        return { code: lines.join('\n'), enums, commands, messages };
    });
}
function generateFiles(filenames, write, magic) {
    return __awaiter(this, void 0, void 0, function* () {
        const magicNumbers = {};
        function updateMagicNumbersWithNewMessages(messages) {
            messages.forEach(message => {
                if (message.magic !== undefined) {
                    magicNumbers[message.id] = message.magic;
                }
            });
        }
        for (const filename of filenames) {
            const moduleName = getModuleName(filename);
            const { code, messages } = yield generateFile(filename, moduleName);
            updateMagicNumbersWithNewMessages(messages);
            if (write) {
                const outputFileName = getOutputFileName(filename);
                (0, fs_1.writeFileSync)(outputFileName, code);
            }
            else {
                console.log(code);
            }
        }
        if (magic) {
            const magicNumbersFileName = getMagicNumbersFileName(filenames[0]);
            print('Generating magic-numbers.ts...');
            (0, fs_1.writeFileSync)(magicNumbersFileName, (0, generator_1.generateMagicNumbers)(magicNumbers));
            print('done\n');
        }
    });
}
if (args.version) {
    console.log(package_json_1.default.version);
    process.exit(0);
}
if (args.help) {
    console.log(`mavlink-mapping-gen v${package_json_1.default.version} by ${package_json_1.default.author}`);
    console.log('usage:');
    console.log(`  ${package_json_1.default.name} [options] def1.xml def2.xml ... \n`);
    console.log(`options:`);
    console.log(`  -V, --version                              # show program version and exit`);
    console.log(`  -h, --help                                 # show help and exit`);
    console.log(`  -w, --write                                # write the content to file rather than to standard output`);
    console.log(`  -m, --magic                                # generate magic-numbers.ts (implies -w)`);
    process.exit(0);
}
if (args._.length === 0) {
    console.error('ERROR: no input specified');
    process.exit(1);
}
generateFiles(args._, args.write || args._.length > 1 || args.magic, args.magic);
